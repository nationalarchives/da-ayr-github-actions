
name: Terraform-Deployment
on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
      tf_dir:
        type: string
        required: true
    secrets:
      AWS_ROLE:
        required: true
      AWS_BUCKET_NAME:
        required: true
      AWS_BUCKET_KEY_NAME:
        required: true
permissions:
  id-token: write
  contents: read
  pull-requests: write
jobs:
  Deployment-Steps:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
    
      - name: Setup Configs and Variables
        run: |
          pwd
          ls -la
          
      - name: Checkout Repo
        uses: actions/checkout@v2
        
      - name: Configre AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: eu-west-2
          role-session-name: Github-OIDC-TERRAFROM
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5
          
      - name: Retrieve Build Parameters
        run: |
          pwd
          ls
          cat /etc/os-release
          lsb_release -a
          sh scripts/backend-tf.sh
          
      - name: Format Terraform
        id: fmt
        run: terraform fmt #-check
        continue-on-error: true

      - name: Initialize Terraform
        id: init
        env: 
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCEKT_KEY_NAME }}
        run: |
          pwd
          cd terraform/environments/dev/
          pwd
          ls
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key={AWS_BUCKET_KEY_NAME}"
          
      - name: Validate Terraform
        id: validate
        run: terraform validate -no-color
      
      - name: Terrafrom Plan
        id: plan
        run: |
          pwd
          ls
          cd terraform/environments/dev/
          terraform plan
#         terraform plan -out plan.out -no-color
        continue-on-error: true
      - name: Terraform Destroy
        id: destroy
        run: |
          cd terraform/environments/dev/
          terraform destroy -auto-approve
        
#       - name: Terraform Plan Status
#         id: if_plan_error
#         if: steps.plan.outcome =='failure'
#         run: exit 1

#       - name: Terrafrom Apply
#         id: apply
#         if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.ref == 'refs/heads/dev' && github.event_name == 'push'
#         run: | 
#           cd terraform/environments/dev/
#           terraform apply plan.out  # -auto-approve -input=false 
